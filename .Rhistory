mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
fit1<-lm(mpg ~ am , data = mtcars)
fit2<-lm(mpg ~ am + wt + cyl + disp, data = mtcars)
fit3<-lm(mpg ~ am + wt + cyl + hp + disp, data = mtcars)
anova(fit1,fit2,fit3)
anov1<-anova(fit1,fit2,fit3)
str(anov1)
anov1$Pr(>F)
anov1$ Pr(>F)
anov1$`Pr(>F)`
str(anov1$`Pr(>F)`)
library(MASS)
?shuttle
head(MASS)
head(shuttle)
logRegshuttle = glm(shuttle$use ~ shuttle$wind,family="binomial")
str(shuttle)
summary(logRegshuttle)
logRegshuttle2 = glm(shuttle$use ~ shuttle$wind + shuttle$magn,family="binomial")
summary(logRegshuttle2)
shuttle$magn
summary(logRegshuttle)$coefficients
summary(logRegshuttle)$coefficients[2.1]
summary(logRegshuttle)$coefficients[2,1]
exp(summary(logRegshuttle)$coefficients[2,1])
summary(logRegshuttle)$coefficients[2,1]
summary(logRegshuttle2)$coefficients[2,1]
exp(summary(logRegshuttle2)$coefficients[2,1])
?round
round(exp(summary(logRegshuttle2)$coefficients[2,1]),3)
shuttle
library(MASS)
shuttle
nrow((shuttle))
shuttle[,6]
shuttle[,7]
shuttle[,7]=="auto
""
"
shuttle[,7]=="auto"
?frequency
str(shuttle)
table(shuttle$wind,shuttle$use)
glm(use~wind,data = shuttle)
glm(use~wind,data = shuttle,family="binomial")
?crosstable
install.packages("gmodels")
?crosstable
?CrossTable()
??CrossTable
CrossTable(shuttle$wind,shuttle$use)
library(gmodels)
library(gdata)
install.packages("gdata")
CrossTable(shuttle$wind,shuttle$use)
??CrossTable
?CrossTable()
library(gmodels)
?CrossTable()
CrossTable(shuttle$use,shuttle$wind)
fit1<-glm(use~wind,data = shuttle,family="binomial")
fit1$coefficients
fit1$coefficients[1,1]
CrossTable(shuttle$wind,shuttle$use)
str(CrossTable(shuttle$wind,shuttle$use))
CrossTable(shuttle$wind,shuttle$use)$t
str(CrossTable(shuttle$wind,shuttle$use)$t)
str(CrossTable(shuttle$wind,shuttle$use))
ct<-CrossTable(shuttle$wind,shuttle$use)$t
ct
ct<-CrossTable(shuttle$wind,shuttle$use)
ct
ct$prop.tbl
ct$prop.tbl[1,1]/ct$prop.tbl[2,1]
ct
?CrossTable
str(shuttle)
InsectSprays
?nls
x <- -5:5
y <- c(5.12, 2.93, 2,67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
xpos <- pmax(0, x)
fit6 <- lm( y ~ x + xpos)
y
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
y
fit6 <- lm( y ~ x + xpos)
fit6
plot(x,y)
summary(fit6)
install.packages("caret")
library(caret)
install.packages("kernlab")
library(kernlab)
data("spam")
data("spam")
inTrain <- createDataPartition(y=spam$type,p=0.75, list = FALSE)
train<-spam[inTrain]
training<-spam[inTrain]
testing<-spam[-inTrain]
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~ . ,data = training, model = "glm" )
modelFit <- train(type ~ . ,data = training, method = "glm" )
install.packages("e1071")
library(e1071)
modelFit <- train(type ~ . ,data = training, method = "glm" )
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newData = testing)
predictions <- predict(modelFit, newdata = testing)
predictions
confusionMatrix(predictions,testing$type)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
metrics
source('~/.active-rstudio-document')
source('~/Cursussen/PractMachLearn/FirstDemo.R', echo=TRUE)
ls()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sessionInfo()
?createDataPartition()
adData <- data.frame(diagnosis,predictors)
head(adData)
trainIndex <- createDataPartition(dagnosis, p = 0.5)
trainIndex <- createDataPartition(diagnosis, p = 0.5)
trainIndex
trainIndex <- createDataPartition(diagnosis, p = 0.5, list = FALSE)
trainIndex
trainIndex <- createDataPartition(diagnosis, p = 0.5, list = FALSE)
training <- adData[trainIndex,]
testing <- adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain,]
training <- mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
str(training)
hist(inTrain$Superplasticizer)
?hist()
hist(training$Superplasticizer)
source('~/Cursussen/PractMachLearn/Week2/Quiz22.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz22.R')
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
colnames(training)
vnames <- colnames(training)
str(vnames)
pmatch('IL',vnames)
vnames
pmatch("IL",vnames)
grep("IL",vnames)
vnames[grep("IL",vnames)]
grep("IL+",vnames)
vnames[grep("IL+",vnames)]
grep("IL+",vnames,value=TRUE)
regexp("IL+",vnames)
regexpr("IL+",vnames)
regexpr("IL+",vnames)
regexpr("IL+",vnames,perl=TRUE)
grep("IL+",vnames,value=TRUE)
grep("IL",vnames,value=TRUE)
regexpr("IL+",vnames,perl=TRUE)
regexpr("IL+",vnames,perl=TRUE)
str(regexpr("IL+",vnames,perl=TRUE))
regexpr("IL+",vnames,perl=TRUE)==1
vnames[regexpr("IL+",vnames,perl=TRUE)==1]
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
diagnosis
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
library(caret)
# install.packages("kernlab")
library(kernlab)
data("spam")
spam$type
inTrain <- createDataPartition(y=spam$type,p=0.75, list = FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
spam[,-58]
source('~/Cursussen/PractMachLearn/PCADemo.R')
source('~/Cursussen/PractMachLearn/PCADemo.R')
source('~/Cursussen/PractMachLearn/PCADemo.R')
cM
testPC
head(testPC)
source('~/Cursussen/PractMachLearn/PCADemo.R')
cM
source('~/Cursussen/PractMachLearn/PCADemo.R')
cm
cM
## Quest1
## Initially the package AppliedPredictiveModeling was not installed
# install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
vnames <- colnames(training)
pnames<-vnames[regexpr("IL+",vnames,perl=TRUE)==1]
preProc <- preProcess(log10(training[,regexpr("IL+",vnames,perl=TRUE)==1]+1),method="pca",pcaComp=2)
regexpr("IL+",vnames,perl=TRUE)==1
training[,regexpr("IL+",vnames,perl=TRUE)==1]
head(training[,regexpr("IL+",vnames,perl=TRUE)==1])
preProc <- preProcess(training[,regexpr("IL+",vnames,perl=TRUE)==1],method="pca")
str(preProc)
preProc <- preProcess(training[,regexpr("IL+",vnames,perl=TRUE)==1],method="pca",pcaComp=2)
preProc
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
str(testing)
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
summary(Alzh_pca)
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
summary(preProc)
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
Alzh_pca
preProc
summary(Alzh_pca)
?preProc()
?preProcess.default()
?preProcess()
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
preProc
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz23.R')
su
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
str(modtest)
length(modtest)
length(testing$diagnosis)
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
length(modtest)
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
cM
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
su
str(su)
su$importance
str(su$importance)
su$importance[3,]
su
length(su$importance)
length(su$importance[3,])
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
struc(preProc)
str(preProc)
preProc$thresh
preProc <- preProcess(training[,regexpr("IL+",vnames,perl=TRUE)==1],method="pca",thresh=0.8)
preProc$thresh
preProc$trace
?prcomp()
?preProcess()
str(preProc)
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
cM
trainIL<-training[,regexpr("IL+",vnames,perl=TRUE)==1]
testIL<-testing[,regexpr("IL+",vnames,perl=TRUE)==1]
modelFitIL <- train(training$diagnosis ~ .,method="glm",data=trainIL)
pr<-predict(modelFitIL,testIL)
length(pr)
cMIL <- confusionMatrix(testing$diagnosis,pr)
cMIL
source('~/Cursussen/PractMachLearn/Week2/Quiz24.R')
cM
cMIL
source('~/Cursussen/PractMachLearn/Week3/Q31.R')
names(segmentationOriginal)
segmentationOriginal$Case
segmentationOriginal$Case==Train
segmentationOriginal$Case=="Train"
segmentationOriginal[Case=="Train"]
segmentationOriginal[segmentationOriginal$Case=="Train"]
segmentationOriginal$Case==Train
segmentationOriginal$Case=="Train"
segmentationOriginal$Case=="Train"
segmentationOriginal[segmentationOriginal$Case=="Train"]
segmentationOriginal[Case=="Train"]
training <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
names(training)
head(training)
training$Cell
unique(training$Cell)
unique(training$Class)
source('~/Cursussen/PractMachLearn/Week3/Q31.R')
source('~/Cursussen/PractMachLearn/Week3/Q31.R')
source('~/Cursussen/PractMachLearn/Week3/Q31.R')
source('~/Cursussen/PractMachLearn/Week3/Q31.R')
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
head(olive)
olive$Area
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
install.packages("pgmm")
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
?tree()
?trees()
?predict
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
source('~/Cursussen/PractMachLearn/Week3/Q33.R')
newdata
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
set.seed(8484)
str(SAheart)
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
source('~/Cursussen/PractMachLearn/Week3/Q34.R')
missClass(trainSA$chd, predict(modelFit, trainSA))
missClass(trainSA,predict(modelFit,trainSA,type="response"))
source('~/.active-rstudio-document', echo=TRUE)
?train
?train()
library(caret)
?train()
install.packages("randomForest")
?wilcox.test()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
test
str(test)
?rank()
source('~/.active-rstudio-document')
str(vowel.train)
source('~/.active-rstudio-document')
str(vowel.train)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
fit$finalModel
source('~/.active-rstudio-document')
gbmFit1
source('~/.active-rstudio-document')
? train()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rfcon
gbmcon
source('~/.active-rstudio-document')
rfcon
gbmcon
source('~/.active-rstudio-document')
rfcon
source('~/.active-rstudio-document')
rfcon
str(rfcon)
rfcon$overall
str(rfcon$overall)
rfcon$overall[1]
source('~/.active-rstudio-document')
rfcon$overall[1]
gbmcon$overall[1]
rf_gbm_agree$overall[1]
rfpredictions
rfprediction == gbmpredictions
rfpredictions == gbmpredictions
rfpredictions[rfpredictions == gbmpredictions]
gbmpredictions[rfpredictions == gbmpredictions]
confusionMatrix(rfpredictions[rfpredictions == gbmpredictions], gbmpredictions[rfpredictions == gbmpredictions])
confusionMatrix(vowel.test$y[rfpredictions == gbmpredictions], rfpredictions[rfpredictions == gbmpredictions])
source('~/.active-rstudio-document')
source('~/Cursussen/PractMachLearn/Week4/Quest2.R')
str(adData)
inTrain
source('~/Cursussen/PractMachLearn/Week4/Quest2.R')
source('~/Cursussen/PractMachLearn/Week4/Quest2.R')
source('~/Cursussen/PractMachLearn/Week4/Quest2.R')
source('~/Cursussen/PractMachLearn/Week4/Quest2.R')
source('~/Cursussen/PractMachLearn/Week4/Quest2.R')
source('~/.active-rstudio-document')
c4
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
str(concrete)
source('~/.active-rstudio-document')
??estaicnet
source('~/.active-rstudio-document')
source('~/Cursussen/PractMachLearn/Week4/Quest5.R')
source('~/Cursussen/PractMachLearn/Week4/Quest5.R')
head(training)
source('~/Cursussen/PractMachLearn/Week4/Quest5.R')
svm.pred
tetsting
testing
source('~/Cursussen/PractMachLearn/Week4/Quest5.R')
str(svm.pred)
str(svm.pred)
str(testing$CompressiveStrength)
source('~/Cursussen/PractMachLearn/Week4/Quest5.R')
? accuracy()
?? accuracy()
source('~/Cursussen/PractMachLearn/Week4/Quest5.R')
acc
vignette("pivotalr") # execute in R console to view the PDF file
install.packages("PivotalR")
vignette("pivotalr") # execute in R console to view the PDF file
ls()
getwd()
library(PivotalR)
db.connect(port = 5333, dbname = "madlib")
quit()
source('~/Atos/Dyneema/anal_simple.R')
dir()
dir()
?lm.influence()
dir()
dir()
ls()
dir()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
q()
dat(cars)
data(cars)
str(cars)
ls
ls()
rm(ls())
rm(ls<-ls())
dir()
q
library(HistData)
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((Galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
manipulate(
barplot(as.matrix(longley[,factor]),
beside = TRUE, main = factor),
factor = picker("GNP", "Unemployed", "Employed"))
manipulate(
boxplot(Freq ~ Class, data = Titanic, outline = outline),
outline = checkbox(FALSE, "Show outliers"))
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
options()
getwd()
setwd("./Cursussen/DevDatProds/slidify/my_third_deck")
dir()
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
